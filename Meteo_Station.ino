#include <DS3231.h>
#include <Wire.h>
// Видеообзоры и уроки работы с ARDUINO на YouTube-канале IOMOIO: https://www.youtube.com/channel/UCmNXABaTjX_iKH28TTJpiqA

#include "Adafruit_GFX.h"     // Библиотека обработчика графики
#include "Adafruit_ILI9341.h" // Программные драйвера для дисплеев ILI9341
#include "URTouch.h"          // Библиотека для работы с сенсорным экраном



#define TFT_DC 9              // Пин подключения вывода D/C дисплея
#define TFT_CS 10             // Пин подключения вывода CS дисплея
// Для управления очисткой экрана с помощью кнопки RESET на Arduino подключить вывод дисплея RESET через резистор к пину RESET на плате Arduino
#define TFT_RST 8             // Пин подключения вывода RESET (Если подключен к питанию или кнопке, то эту строку закомментировать, а следующую раскомментировать)
// #define TFT_RST -1         // Если вывод дисплея RESET подключен к питанию или через кнопку RESET на Arduino
// Uno Hardware SPI
#define TFT_MISO 12           // Пин подключения вывода дисплея SDO(MISO)
#define TFT_MOSI 11           // Пин подключения вывода дисплея SDI(MOSI)
#define TFT_CLK 13            // Пин подключения вывода дисплея SCK

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST, TFT_MISO);  // Создаем объект дисплея и сообщаем библиотеке распиновку для работы с графикой

#define t_SCK 3               // Пин подключения вывода дисплея T_CLK
#define t_CS 4                // Пин подключения вывода дисплея T_CS
#define t_MOSI 5              // Пин подключения вывода дисплея T_DIN
#define t_MISO 6              // Пин подключения вывода дисплея T_DOUT
#define t_IRQ 7               // Пин подключения вывода дисплея T_IRQ

URTouch ts(t_SCK, t_CS, t_MOSI, t_MISO, t_IRQ); // Создаем объект сенсорного модуля и сообщаем библиотеке распиновку для работы с ним
DS3231 clock;
RTCDateTime dt;

/*enum Images
{
  WIFI_ICON,
  THERMOMETER_ICON
};*/

const uint8_t xWiFiIcon[37] PROGMEM =
{
  4, 5, 6, 7, 8, 9, 10, 2, 3, 11, 12, 0, 1, 13, 14, 5, 6, 7, 8, 9, 3, 4, 10, 11, 2, 12, 6, 7, 8, 4, 5, 9, 10, 6, 7, 8, 7
};
const uint8_t yWiFiIcon[37] PROGMEM =
{
  2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 10, 10, 10, 11, 11, 11, 11, 14, 14, 14, 15
};

const uint8_t xThermometerIcon[1088] PROGMEM =
{
  11, 12, 13, 14,
  9, 10, 11, 12, 13, 14, 15, 16,
  9, 10, 11, 12, 13, 14, 15, 16,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
  6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
  4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
  3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
  3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
  4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
  5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,//*
  7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,//*
  9, 10, 11, 12, 13, 14, 15, 16
};

const uint8_t yThermometerIcon[1088] PROGMEM =
{ 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
  18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
  19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
  20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
  21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
  22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
  23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
  26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
  27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
  28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
  29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
  30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
  31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
  32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
  33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
  34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
  35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
  36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
  37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
  38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
  39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
  40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
  41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
  42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
  43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
  44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
  45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
  46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
  47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
  48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
  49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
  50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
  51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
  52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
  53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
  54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
  55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
  56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
  57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
  58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
  59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
  60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
  61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
  62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
  63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
  65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
  66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
  67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
  68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
  69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
  72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
  73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
  74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
  75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
  76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
  77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
  78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
  79, 79, 79, 79, 79, 79, 79, 79
};

const uint16_t ThermometerIconColors[1088] PROGMEM =
{ ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  //2
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  //3
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  //4
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_WHITE,
  //
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  // Начало проверки+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED,
  ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED,
  ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED,
  ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED,
  ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_RED, ILI9341_RED,
  ILI9341_RED, ILI9341_RED, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK,
  ILI9341_BLACK, ILI9341_BLACK, ILI9341_BLACK, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN, ILI9341_DARKCYAN,
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE,
  //+
  ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE, ILI9341_WHITE
};



void printColorIcon(
  const int xLeftCorner,
  const int yLeftCorner,
  uint8_t *xBufImageCoords,
  size_t xBufSize,
  uint8_t* yBufImageCoords,
  const uint16_t* ColorBufImage
  )
{
  for (int i = 0; i <= xBufSize - 1; i++)
  {
    tft.drawPixel(int(pgm_read_byte(&xBufImageCoords[i]) + xLeftCorner), int(pgm_read_byte(&yBufImageCoords[i]) + yLeftCorner), pgm_read_word(&ColorBufImage[i]));
  }
}


void printOneColorIcon(
  const int xLeftCorner,
  const int yLeftCorner,
  uint8_t *xBufImageCoords,
  size_t xBufSize,
  uint8_t* yBufImageCoords,
  uint16_t ColorImage
)
{

  for (int i = 0; i <= xBufSize - 1; i++)
  {
    tft.drawPixel(pgm_read_byte(&xBufImageCoords[i]) + xLeftCorner, pgm_read_byte(&yBufImageCoords[i]) + yLeftCorner, ColorImage);
  }
}


/*void printWiFiIcon(Images image, int x_LeftTopAngle, int y_LeftTopAngle, uint16_t WiFiIconColor = 0)
  {
  Serial.println("printWiFiFunc");
  switch (image) {
    case WIFI_ICON:
      Serial.println("WIFI_ICON Case");
      for (byte i = 0; i <= 36; i++)
      {
        tft.drawPixel(int(pgm_read_byte(&WiFiIcon[0][i]) + x_LeftTopAngle), int(pgm_read_byte(&WiFiIcon[1][i]) + y_LeftTopAngle), WiFiIconColor);
        //tft.drawPixel(int(WiFiIcon[0][i] + x_LeftTopAngle), int(WiFiIcon[1][i] + y_LeftTopAngle), WiFiIconColor);
      }
      Serial.println("Leave WIFI_ICON Case");
      break;
    case THERMOMETER_ICON:
      //ILI9341_DARKCYAN
      //ILI9341_WHITE
      //ILI9341_BLACK
      //ILI9341_RED
      Serial.print("Start");

      for (int i = 0; i <= 1087; i++)
      {
        tft.drawPixel(int(pgm_read_byte(&ThermometerIcon[0][i]) + x_LeftTopAngle), int(pgm_read_byte(&ThermometerIcon[1][i]) + y_LeftTopAngle), int(pgm_read_word(&ThermometerIconColors[i])));
        //tft.drawFastHLine(0, 50, 200, ILI9341_WHITE);
        Serial.print("Size = ");

      }
      Serial.print("Finish");
      break;
  }
  }*/

void setup() {
  //tft.setTextWrap(0); //Без переноса, 1 - с переносом
  Serial.begin(9600);

  tft.begin();                      // Инициализируем начало работы с графическим дисплеем
  tft.setRotation(3);               // Переводим дисплей в альбомную ориентацию

  ts.InitTouch();                   // Инициализируем сенсорный модуль дисплея
  ts.setPrecision(PREC_LOW);    // Определяем необходимую точность обработки нажатий: PREC_LOW - низкая, PREC_MEDIUM - средняя, PREC_HI - высокая, PREC_EXTREME - максимальная
  tft.fillScreen(ILI9341_BLACK);
  //tft.setTextColor(0xF3E0);  // Определяем цвет текста для вывода на дисплей
  /*tft.setTextSize(2);               // Определяем размер шрифта для вывода на дисплей
    tft.setCursor(0,0);              // Определяем координаты верхнего левого угла области вывода
    tft.print("25.04.2021 13:26");
    //tft.print(utf8rus("Тестируем") + " TouchTFT");  // Выводим текст; Функция utf8rus конвертирует текст в русский, если библиотека Adafruit_GFX оптимизирована для работы с кириллицей
    //tft.drawFastHLine(66, 20, 320, ILI9341_GREEN);
    tft.setTextSize(4);
    tft.setCursor(78,22);              // Определяем координаты верхнего левого угла области вывода
    tft.print(utf8rus("Тестируем") + " TouchTFT");
    tft.setTextSize(3);
    tft.setTextColor(ILI9341_GREEN);  // Определяем цвет текста для вывода на экран
    tft.setCursor(20,220);            // Определяем координаты верхнего левого угла области вывода
    tft.print("http://iomoio.ru");    // Выводим текст
    delay(2000);
    tft.setCursor(20,220);
    tft.setTextColor(ILI9341_GREEN, ILI9341_BLACK);
    tft.print("gwygwhwhwehwtwer");*/
  //tft.fillScreen(ILI9341_BLACK);
  clock.begin();
  //clock.setDateTime(2021, 7, 3, 22, 41, 30);
  //clock.setDateTime(__DATE__, __TIME__);
}

void drawBoxes
(
  int xLeftCorner,
  int yLeftCorner,
  int BoxAndTextColor
)
{
  tft.fillRect(0 + xLeftCorner, 0 + yLeftCorner, 148, 4, BoxAndTextColor);
  tft.fillRect(0 + xLeftCorner, 0 + yLeftCorner, 4, 110, BoxAndTextColor);
  tft.fillRect(0 + xLeftCorner, 106 + yLeftCorner, 148, 4, BoxAndTextColor);
  tft.fillRect(144 + xLeftCorner, 0 + yLeftCorner, 4, 110, BoxAndTextColor);
  tft.fillRect(4 + xLeftCorner, 20 + yLeftCorner, 140, 2, BoxAndTextColor);
  tft.fillRect(73 + xLeftCorner, 4 + yLeftCorner, 2, 16 , BoxAndTextColor);
  tft.setTextSize(2);
  tft.setCursor(20 + xLeftCorner, 5 + yLeftCorner);
  tft.setTextColor(BoxAndTextColor);
  tft.print("DAY");
  tft.setCursor(85 + xLeftCorner, 5 + yLeftCorner);
  tft.print("HOUR");
}

void drawSkelet
(
  int SkeletColor
)
{
  drawBoxes(8, 17, SkeletColor);
  drawBoxes(8, 129, SkeletColor);
  drawBoxes(164, 17, SkeletColor);
  drawBoxes(164, 129, SkeletColor);
}

void loop()
{
  static String checkDateTime;
  tft.setTextSize(2);
  tft.setCursor(0, 0);
  tft.setTextColor(0xF3E0, ILI9341_BLACK);
  if (checkDateTime != clock.getStringDateTime()) {
    checkDateTime = clock.getStringDateTime();
    tft.print(checkDateTime);
  }
  //printWiFiIcon(WIFI_ICON, 304, 0, 0xF800); // GREEN - 0x07E0, RED - 0xF800
  //printWiFiIcon(THERMOMETER_ICON, 100, 100);
  //drawBox(7, 16);
  drawSkelet(ILI9341_WHITE);
  printOneColorIcon(
    304,
    0,
    xWiFiIcon,
    sizeof(xWiFiIcon) / sizeof(xWiFiIcon[0]),
    yWiFiIcon,
    ILI9341_RED
  );
  printColorIcon(
    31,
    41,
    xThermometerIcon,
    sizeof(xThermometerIcon) / sizeof(xThermometerIcon[0]),
    yThermometerIcon,
    ThermometerIconColors
  );



  
  /*int x, y;                         // Переменные для работы с координатами нажатий

    while(ts.dataAvailable())         // Пока имеются данные с сенсорного модуля
    {
    ts.read();                      // Считываем с него данные
    x = ts.getX();                  // Считываем координату нажатия X
    y = ts.getY();                  // Считываем координату нажатия Y
    if((x!=-1) && (y!=-1))          // Если обе координаты в положительном диапазоне (т.е. если есть нажатие)
    {
      x += 0;                      // Корректируем координату с учетом калибровочных данных
      y += 0;                       // Корректируем координату с учетом калибровочных данных
      int radius = 5;               // Определяем радиус разрисовки
      tft.fillCircle(x, y, radius, ILI9341_YELLOW); // Рисуем окружность, закрашенную желтым
    }
    }
    }
    // Начало функции обработки кириллических символов
    String utf8rus(String source)  // Функция для конвертации русских символов из двубайтовой кодировки в однобайтовую
    {
    int i,k;
    String target;
    unsigned char n;
    char m[2] = { '0', '\0' };
    k = source.length(); i = 0;
    while (i < k) {
    n = source[i]; i++;

    if (n >= 0xBF){
      switch (n) {
        case 0xD0: {
          n = source[i]; i++;
          if (n == 0x81) { n = 0xA8; break; }
          if (n >= 0x90 && n <= 0xBF) n = n + 0x2F;
          break;
        }
        case 0xD1: {
          n = source[i]; i++;
          if (n == 0x91) { n = 0xB7; break; }
          if (n >= 0x80 && n <= 0x8F) n = n + 0x6F;
          break;
        }
      }
    }
    m[0] = n; target = target + String(m);
    }
    return target;*/
}
// Конец функции обработки кириллических символов
